//@author: idwyr
//@help: transition
//@tags: texture
//@credits: glsl.io

Texture2D from, to;
float progress;
float size = 0.3;
float GOLDEN_ANGLE = 2.399963229728653; // PI * (3.0 - sqrt(5.0))
float QUALITY = 32;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float4 blur(Texture2D t, float2 c, float radius) {
  float4 sum = float4(0,0,0,1);
  float q = float(QUALITY);
  for (int i=0; i<QUALITY; ++i) {
    float fi = float(i);
    float a = fi * GOLDEN_ANGLE;
    float r = sqrt(fi / q) * radius;
    float2 p = c + r * float2(cos(a), sin(a));
    sum += t.Sample(linearSampler, p);
  }
  return sum / q;
}


float4 PS(psInput input) : SV_Target
{	float2 p = input.uv;
	
  float inv = 1.-progress;
	float4 c = float4 (0,0,0,1);
  c = inv*blur(from, p, progress*size) + progress*blur(to, p, inv*size);
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



